# -*- coding: utf-8 -*-
"""EDA-SPORTS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fhtP0XMj-FdHjQRvULRVvRuJ6FGUBkxt

**EXPLORATORY DATA ANALYSIS - SPORTS**

AUTHOR: KARTHIKEYAN N

DATA SCIENCE AND BUSINESS ANALYTICS INTERN @ THE SPARK FOUNDATION

TASK 5: EXPLORATORY DATA ANALYSIS - SPORTS(IPL)

DATA SET: [click here](https://bit.ly/34SRn3b)

---

**PROBLEM**:

1.   Find out the most successful teams, players and factor contributing win or loss of a team.
2.   Suggest teams or players a company should endorse for its products.

----

**IMPORT LIBRARIES**
"""

# Commented out IPython magic to ensure Python compatibility.
# import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

"""**LOAD DATASET**"""

# load matches dataset
matches_df = pd.read_csv("/content/matches.csv")

matches_df.head()

# load deliveries dataset
deliveries_df = pd.read_csv("/content/deliveries.csv")

deliveries_df.head()

# merge matches & deliveries datasets
merge_df = pd.merge(deliveries_df,matches_df,left_on='match_id',right_on='id')

merge_df.head()

# size of each dataset
print("--------------------------------------------")
print("size of matches dataset : ",matches_df.shape )
print("--------------------------------------------")
print("size of deliveries dataset : ",deliveries_df.shape )
print("--------------------------------------------")
print("size of merge dataset : ",merge_df.shape )
print("--------------------------------------------")

"""**EDA OF MATCHES DATASET**"""

matches_df.info()

# statistical analysis of matches_df
matches_df.describe(include='all')

"""**HANDLING MISSING VALUES**"""

# missing values in matches_df
matches_df.isnull().sum()

# drop "umpire3" column
matches_df.drop(["umpire3"],axis=1,inplace=True)

"""**HANDLING MISSING VALUES IN CITY COLUMN**"""

# find the venue name of all missing value "city" 
matches_df[matches_df["city"].isnull()][["city","venue"]]

matches_df["city"] = matches_df["city"].fillna("Dubai")

"""**HANDLING MISSING VALUES IN UMPIRE1, UMPIRE2, PLAYER OF MATCH COLUMNS**"""

# rows having missing values
matches_df[(matches_df["umpire1"].isnull()) | (matches_df["umpire2"].isnull()) | (matches_df["player_of_match"].isnull())]

# delete rows having missing value in columns 'umpire1', 'umpire2', 'player_of_match'.
matches_df.dropna(subset=['umpire1', 'umpire2', 'player_of_match'],inplace=True)

# shape of updated matches_df DataFrame
matches_df.shape

"""**EDA OF DELIVERY DATASET**"""

deliveries_df.info()

# statistical analysis of deliveries dataset
deliveries_df.describe()

"""**HANDLING MISSING VALUES**"""

# see how many missing value present each column
deliveries_df.isnull().sum()

# drop columns "player_dismissed","dismissal_kind","fielder" from the DataFrame
deliveries_df.drop(columns=["player_dismissed","dismissal_kind","fielder"],axis=1,inplace=True)

# check for any missing value in deliveries_df
deliveries_df.isnull().sum().sum()

matches_df.tail()

deliveries_df.head()

"""**NUMBER OF TEAMS PARTICIPATED EACH SEASON**"""

matches_df.groupby('season')['team1'].nunique().plot(kind = 'bar', figsize=(15,5),color = 'c')
plt.title("Number of teams participated each season ",fontsize=18,fontweight="bold")
plt.ylabel("Count of teams", size = 25)
plt.xlabel("Season", size = 25)
plt.xticks(size = 15)
plt.yticks(size = 15)

"""**MATCHES PLAYED IN EACH SEASON**"""

plt.figure(figsize = (18,6))
sns.countplot('season',data=matches_df,)
plt.title("Number of Matches played in each IPL season",fontsize=20)
plt.xlabel("season",fontsize=15)
plt.ylabel('Matches',fontsize=15)
plt.show()

"""**NUMBER OF MATCHES WON BY TEAMS**"""

plt.figure(figsize = (18,6))
sns.countplot(x='winner',data=matches_df, palette='cool')
plt.title("Numbers of matches won by team ",fontsize=20)
plt.xticks(rotation=50)
plt.xlabel("Teams",fontsize=15)
plt.ylabel("No of wins",fontsize=15)
plt.show()

# find how many stadium present in each cities
city_venue = matches_df.groupby(['city','venue']).count()['season']
city_venue_df = pd.DataFrame(city_venue)
city_venue_df

"""**VENUE WHICH HAS HOSTED MOST NUMBER OF IPL MATCHES**"""

# matches_df["venue"].value_counts().sort_values(ascending = True).tail(10)
matches_df["venue"].value_counts().sort_values(ascending = True).tail(10).plot(kind = 'barh',figsize=(12,8), fontsize=15, color='c')
plt.title("Venue which has hosted most number of IPL matches",fontsize=18,fontweight="bold")
plt.ylabel("Venue", size = 25)
plt.xlabel("Frequency", size = 25)

"""**WHICH TEAM HAS MAXIMUM NUMBER OF WIN IN IPL**"""

matches_df["winner"].value_counts().sort_values(ascending = True).tail().plot(kind = 'barh', figsize = (15,5), color = 'c')
plt.title("Winners of IPL across 11 seasons",fontsize=18,fontweight="bold")
plt.ylabel("Teams", size = 25)
plt.xlabel("Frequency", size = 25)
plt.xticks(size = 15)
plt.yticks(size = 15)

"""**DOES TEAM CHOOSE TO BAT OR FIELD FIRST, AFTER WINNING TOSS?**"""

colors = ['#FFBF00', '#FA8072']
matches_df['toss_decision'].value_counts().plot(kind='pie', fontsize=14, autopct='%3.1f%%', colors=colors,
                                               figsize=(10,7), shadow=True, startangle=135, legend=True, cmap='Oranges')
plt.ylabel('Toss Decision')
plt.title('Decision taken by captains after winning tosses', size = 20)
plt.show()

"""**HOW TOSS DECISION AFFECTS MATCH RESULTS?**"""

# create a column which store 'win' if a team win a match & 
matches_df['toss_win_game_win'] = np.where((matches_df.toss_winner == matches_df.winner),'win','loss')
plt.figure(figsize = (15,5))
sns.countplot('toss_win_game_win', data=matches_df, hue = 'toss_decision',)
plt.title("How Toss Decision affects match result", fontsize=18,fontweight="bold")
plt.xticks(size = 15)
plt.yticks(size = 15)
plt.xlabel("Winning Toss and winning match", fontsize = 25)
plt.ylabel("Frequency", fontsize = 25)

"""**NUMBER OF TOSS WON BY INDIVIDUAL TEAMS**"""

plt.figure(figsize = (18,6))
sns.countplot(x='toss_winner',data=matches_df, palette='cool')
plt.title("Number of Toss won by team ",fontsize=20)
plt.xticks(rotation=50)
plt.xlabel("Teams",fontsize=15)
plt.ylabel("No of toss",fontsize=15)
plt.show()

"""**INDIVIDUAL TEAM DECISION TO CHOOSE BAT FIRST OR SECOND AFTER WINNING TOSS**"""

plt.figure(figsize = (25,10))
sns.countplot('toss_winner', data = matches_df, hue = 'toss_decision')
plt.title("Teams decision to bat first or second after winning toss", size = 30, fontweight = 'bold')
plt.xticks(size = 15, rotation=50)
plt.yticks(size = 15)
plt.xlabel("Toss Winner", size = 35)
plt.ylabel("Count", size = 35)

"""**WHICH PLAYER PERFORMANCE HAS MOSTLY LED TEAM'S WIN?**"""

matches_df['player_of_match'].value_counts().head(10).plot(kind = 'bar',figsize=(12,8), fontsize=15, color='c')
plt.title("Top 10 players with most MoM awards",fontsize=18,fontweight="bold")
plt.ylabel("Frequency", size = 25)
plt.xlabel("Players", size = 25)

"""**TEAM TOTAL SCORING RUNS OVER THE YEARS?**"""

merge_df.groupby('season')['batsman_runs'].sum().plot(kind = 'line', linewidth = 3, figsize =(15,5),color = 'c')
                                                                                          
plt.title("Runs over the years",fontsize= 25, fontweight = 'bold')
plt.xlabel("Season", size = 25)
plt.ylabel("Total Runs Scored", size = 25)
plt.xticks(size = 12)
plt.yticks(size = 12)

"""**TOP RUN GETTERS OF IPL**"""

#let's plot the top 10 run getter so far in IPL
merge_df.groupby('batsman')['batsman_runs'].sum().sort_values(ascending = False).head(10).plot(kind = 'bar', color = 'c',
                                                                                            figsize = (15,5))
plt.title("Top Run Getters of IPL", fontsize = 20, fontweight = 'bold')
plt.xlabel("Batsmen", size = 25)
plt.ylabel("Total Runs Scored", size = 25)
plt.xticks(size = 12)
plt.yticks(size = 12)

"""**WHICH BATSMAN HAS BEEN MOST CONSISTENT AMONG TOP 10 RUN GETTERS?**"""

consistent_batsman = merge_df[merge_df.batsman.isin(['SK Raina', 'V Kohli','RG Sharma','G Gambhir',
                                            'RV Uthappa', 'S Dhawan','CH Gayle', 'MS Dhoni',
                                            'DA Warner', 'AB de Villiers'])][['batsman','season','total_runs']]

consistent_batsman.groupby(['season','batsman'])['total_runs'].sum().unstack().plot(kind = 'box', figsize = (15,8))
plt.title("Most Consistent batsmen of IPL", fontsize = 20, fontweight = 'bold')
plt.xlabel("Batsmen", size = 25)
plt.ylabel("Total Runs Scored each season", size = 25)
plt.xticks(size = 15)
plt.yticks(size = 15)

"""**TOP WICKET TAKER OF IPL**"""

merge_df.groupby('bowler')['player_dismissed'].count().sort_values(ascending = False).head(10).plot(kind = 'bar', 
                                                color = 'c', figsize = (15,5))
plt.title("Top Wicket Takers of IPL", fontsize = 20, fontweight = 'bold')
plt.xlabel("Bowler", size = 25)
plt.ylabel("Total Wickets Taken", size = 25)
plt.xticks(size = 12)
plt.yticks(size = 12)

"""**BATSMAN WITH THE BEST STRIKE RATE OVER THE YEARS**"""

#We will consider players who have played 10 or more seasons
no_of_balls = pd.DataFrame(merge_df.groupby('batsman')['ball'].count()) #total number of matches played by each batsman
runs = pd.DataFrame(merge_df.groupby('batsman')['batsman_runs'].sum()) #total runs of each batsman
seasons = pd.DataFrame(merge_df.groupby('batsman')['season'].nunique()) #season = 1 implies played only 1 season

batsman_strike_rate = pd.DataFrame({'balls':no_of_balls['ball'],'run':runs['batsman_runs'],'season':seasons['season']})
batsman_strike_rate.reset_index(inplace = True)

batsman_strike_rate['strike_rate'] = batsman_strike_rate['run']/batsman_strike_rate['balls']*100
highest_strike_rate = batsman_strike_rate[batsman_strike_rate.season.isin([10,11])][['season','batsman','strike_rate']].sort_values(by = 'strike_rate',
                                                                                                           ascending = False)

highest_strike_rate.head(10)

plt.figure(figsize = (15,6))
sns.barplot(x='batsman', y='strike_rate', data = highest_strike_rate.head(10), hue = 'season',palette = 'cool')
plt.title("Highest strike rates in IPL",fontsize= 30, fontweight = 'bold')
plt.xlabel("Player", size = 25)
plt.ylabel("Strike Rate", size = 25)
plt.xticks(size = 15, rotation=50)
plt.yticks(size = 14)

"""**SOLUTIONS:**

**Q-1**: As a sports analysts, find out the most successful teams, players and factors contributing win or loss of a team.

1.   Mumbai Indians is the most successful team in IPL and has won the most number of toss. 
2.   There were more matches won by chasing the total(419 matches) than defending(350 matches).

1.   When defending a total, the biggest victory was by 146 runs(Mumbai Indians defeated Delhi Daredevils by 146 runs on 06 May 2017 at Feroz Shah Kotla stadium, Delhi).
2.   When chasing a target, the biggest victory was by 10 wickets(without losing any wickets) and there were 11 such instances.

1.   The Mumbai city has hosted the most number of IPL matches.
2.   Chris Gayle has won the maximum number of player of the match title.

1.   Eden Gardens has hosted the maximum number of IPL matches.
2.   If a team wins a toss choose to field first as it has highest probablity of winning

**Q-2**: Suggest teams or players a company should endorse for its products.

1.   If the franchise is looking for a consistant batsman who needs to score good amount of runs then go for V Kohli, S Raina, Rohit Sharma , David Warner...
2.   If the franchise is looking for a game changing batsman then go for Chris Gayle, AB deVillers, R Sharma , MS Dhoni...


3.   If the franchise is looking for a batsman who could score good amount of runs every match the go for DA Warner, CH Gayle, V Kohli,AB de Villiers,S Dhawan

1.   If the franchise needs the best finisher in lower order having good strike rate then go for CH Gayle,KA Pollard, DA Warner,SR Watson,BB McCullum
2.   If the franchise need a experienced bowler then go for Harbhajan Singh ,A Mishra,PP Chawla ,R Ashwin,SL Malinga,DJ Bravo

1.   If the franchise need a wicket taking bowler then go for SL Malinga,DJ Bravo,A Mishra ,Harbhajan Singh, PP Chawla
2.   If the franchise need a bowler bowling most number of dot balls then go for Harbhajan Singh,SL Malinga,B Kumar,A Mishra,PP Chawla

1.   If the franchise need a bowler with good economy then go for DW Steyn ,M Muralitharan ,R Ashwin,SP Narine ,Harbhajan Singh

**THANK YOU**
"""